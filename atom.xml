<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnson的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://johnson-hd.github.io/"/>
  <updated>2018-04-19T07:18:03.395Z</updated>
  <id>https://johnson-hd.github.io/</id>
  
  <author>
    <name>Johnson</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSR初探</title>
    <link href="https://johnson-hd.github.io/2018/04/16/ssr/ssr%E5%88%9D%E6%8E%A2/"/>
    <id>https://johnson-hd.github.io/2018/04/16/ssr/ssr初探/</id>
    <published>2018-04-16T12:20:21.000Z</published>
    <updated>2018-04-19T07:18:03.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SSR"><a href="#什么是SSR" class="headerlink" title="什么是SSR"></a>什么是SSR</h2><p>SSR是服务端渲染。现在的SPA应用，大多是定义一个根元素，然后动态加载js后，组装根元素，但这样会遇到几个问题：</p><ul><li>无法SEO，根元素内容为空，爬虫无法爬到内容</li><li>首屏白屏，js加载完成后才会渲染出页面</li></ul><p>而SSR就是为了解决这些问题，将首屏需要的页面和数据一起吐给浏览器，即利于SEO，又加速首屏渲染</p><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   ├── webpack.client.js --------------------------- client打包脚本</span><br><span class="line">│   └── webpack.server.js --------------------------- server打包脚本</span><br><span class="line">├── dist</span><br><span class="line">│   ├── bundle.client.js ---------------------------- client打包后脚本</span><br><span class="line">│   └── bundle.server.js ---------------------------- server打包后脚本</span><br><span class="line">├── package.json</span><br><span class="line">├── server.js --------------------------------------- server代码</span><br><span class="line">├── src --------------------------------------------- 前端代码</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── app.js -------------------------------------- 生成vue实例</span><br><span class="line">│   ├── entry-client.js ----------------------------- client打包入口</span><br><span class="line">│   ├── entry-server.js ----------------------------- server打包入口</span><br><span class="line">│   ├── router -------------------------------------- 路由</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   ├── store --------------------------------------- vuex</span><br><span class="line">│   │   └── index.js</span><br><span class="line">│   └── views</span><br><span class="line">│       ├── about.vue</span><br><span class="line">│       ├── blog.vue</span><br><span class="line">│       └── home.vue</span><br><span class="line">│       └── user.vue</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><h2 id="思路整理"><a href="#思路整理" class="headerlink" title="思路整理"></a>思路整理</h2><ol><li>发起请求</li><li>server根据请求url，获取与此相关组件，找到组件中的 <code>asyncData</code> 拉取异步数据，数据获取完成后，<code>renderToString</code> 后返回给client，包含html和数据</li><li>client拿到html，vue实例化，生成页面，拿到数据，进行页面的数据渲染</li></ol><h2 id="写在后面的话"><a href="#写在后面的话" class="headerlink" title="写在后面的话"></a>写在后面的话</h2><ul><li>详细的描述都在代码中加了注释，本文主要是将思路梳理一下，建议阅读本文的时候，结合代码来看</li><li>后面有时间的话会研究一下Nuxt，会同步到博客中</li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Johnson-hd/vue-ssr-master" target="_blank" rel="noopener">vue-ssr-master</a><br><a href="https://github.com/vuejs/vue-hackernews-2.0" target="_blank" rel="noopener">官网demo</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/entry/5a56c944518825734d1485bc" target="_blank" rel="noopener">https://juejin.im/entry/5a56c944518825734d1485bc</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是SSR&quot;&gt;&lt;a href=&quot;#什么是SSR&quot; class=&quot;headerlink&quot; title=&quot;什么是SSR&quot;&gt;&lt;/a&gt;什么是SSR&lt;/h2&gt;&lt;p&gt;SSR是服务端渲染。现在的SPA应用，大多是定义一个根元素，然后动态加载js后，组装根元素，但这样会遇到几个
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vue集成Typescript</title>
    <link href="https://johnson-hd.github.io/2018/04/13/vue/typescript/"/>
    <id>https://johnson-hd.github.io/2018/04/13/vue/typescript/</id>
    <published>2018-04-13T14:09:48.000Z</published>
    <updated>2018-04-17T02:14:22.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h2><p><code>vue-cli</code> 今后会支持 <code>Typescript</code>，未支持之前，可以用下面的方法集成</p><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ vue init webpack <span class="string">"vue-typescript-master"</span></span><br><span class="line">$ <span class="built_in">cd</span> vue-typescript-master</span><br><span class="line">$ yarn install</span><br></pre></td></tr></table></figure><h2 id="修改文件后缀"><a href="#修改文件后缀" class="headerlink" title="修改文件后缀"></a>修改文件后缀</h2><p><code>src/main.js</code> =&gt; <code>src/main.ts</code><br><code>src/router/index.js</code> =&gt; <code>src/router/index.ts</code></p><h2 id="增加typescript依赖包"><a href="#增加typescript依赖包" class="headerlink" title="增加typescript依赖包"></a>增加typescript依赖包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add typescript ts-loader --dev</span><br></pre></td></tr></table></figure><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><p>找到 <code>build/webpack.base.conf.js</code><br>修改 <code>entry</code> 为 <code>./src/main.ts</code><br><code>resolve/extensions</code> 增加一项 <code>.ts</code><br><code>rules</code> 增加一项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="built_in">test</span>: /\.tsx?$/,</span><br><span class="line">  loader: <span class="string">'ts-loader'</span>,</span><br><span class="line">  include: resolve(<span class="string">'src'</span>),</span><br><span class="line">  options: &#123;</span><br><span class="line">    appendTsSuffixTo: [/\.vue$/]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="增加tsconfig-json"><a href="#增加tsconfig-json" class="headerlink" title="增加tsconfig.json"></a>增加tsconfig.json</h2><p>在根目录下创建tsconfig.json，列一下我的内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"include"</span>: [</span><br><span class="line">    <span class="string">"src/**/*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"exclude"</span>: [</span><br><span class="line">    <span class="string">"node_modules"</span></span><br><span class="line">  ],</span><br><span class="line">  // 编译选项</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    // 采用的模块系统</span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"esnext"</span>,</span><br><span class="line">    // 如何处理模块</span><br><span class="line">    <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    // 编译输出目标 ES 版本</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    // 允许从没有设置默认导出的模块中默认导入</span><br><span class="line">    <span class="string">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    // 将每个文件作为单独的模块</span><br><span class="line">    <span class="string">"isolatedModules"</span>: <span class="literal">false</span>,</span><br><span class="line">    // 启用装饰器</span><br><span class="line">    <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    // 允许编译javascript文件</span><br><span class="line">    <span class="string">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    // 编译过程中需要引入的库文件的列表</span><br><span class="line">    <span class="string">"lib"</span>: [</span><br><span class="line">      <span class="string">"dom"</span>,</span><br><span class="line">      <span class="string">"es2015"</span>,</span><br><span class="line">      <span class="string">"es2015.promise"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"pretty"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="增加vue-shims-d-ts"><a href="#增加vue-shims-d-ts" class="headerlink" title="增加vue-shims.d.ts"></a>增加vue-shims.d.ts</h2><p>在 <code>src</code> 目录下增加 <code>vue-shims.d.ts</code> ，内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">declare</span> module <span class="string">"*.vue"</span> &#123;</span><br><span class="line">  import Vue from <span class="string">"vue"</span></span><br><span class="line">  <span class="built_in">export</span> default Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释一下：<code>.d.ts</code> 类型的文件，typescript会自动加载，这里是告诉typescript解析器 <code>*.vue</code> 结尾的文件可以交给 <code>vue</code> 模块来处理，后续我们在引入vue文件的时候，也需要将 <code>.vue</code> 的后缀加上，所以我们现在需要在 <code>main.ts</code> 中修改为 <code>./App.vue</code> 和在 <code>src/router/index.ts</code> 中修改为 <code>@/components/HelloWorld.vue</code></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>至此，我们的vue和typescript已经集成完毕了，如果有问题，可以参照一下 <code>常见问题</code> 项。写typescript我们经常会用到这 <code>vue-class-component</code> 和 <code>vue-property-decorator</code> 这2个插件，用法很简单，自己参照官网即可，别忘记了配置 <code>.babelrc</code> 文件<br><code>vue-class-component</code>: <a href="https://github.com/vuejs/vue-class-component" target="_blank" rel="noopener">https://github.com/vuejs/vue-class-component</a><br><code>vue-property-decorator</code>: <a href="https://github.com/kaorun343/vue-property-decorator" target="_blank" rel="noopener">https://github.com/kaorun343/vue-property-decorator</a></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>代码规范使用 <code>tslint</code>，和 <code>eslint</code> 差不多的，需要增加编辑器的配置，和在webpack中增加 <code>tslint-loader</code> 的配置</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>执行 <code>npm run start</code> ，可能会报错 <code>Cannot read property &#39;afterCompile&#39; of undefined</code> ，可以看一下<code>https://github.com/TypeStrong/ts-loader/issues/729</code> ，其中一个回答是 <code>Maybe install ts-loader 3.5.0 if you&#39;re not using webpack 4?</code> ，由于默认安装的webpack版本不是4，所以我们需要修改ts-loader的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add ts-loader@3.5 --dev</span><br></pre></td></tr></table></figure><p>此时再执行 <code>npm run start</code> 应该就会正常，或者是正常的typescript语法报错</p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><p><a href="https://github.com/Johnson-hd/vue-typescript-master" target="_blank" rel="noopener">vue-typescript-master</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h2&gt;&lt;p&gt;&lt;code&gt;vue-cli&lt;/code&gt; 今后会支持 &lt;code&gt;Typescript&lt;/code&gt;，未支持
      
    
    </summary>
    
    
  </entry>
  
</feed>
